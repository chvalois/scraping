{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-07-05T15:49:12.441507Z", "invocation_id": "cb8c745a-db7f-4baf-a202-df2be075ae77", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2024-07-05T15:49:12.250412Z", "completed_at": "2024-07-05T15:49:12.259507Z"}, {"name": "execute", "started_at": "2024-07-05T15:49:12.259966Z", "completed_at": "2024-07-05T15:49:12.327879Z"}], "thread_id": "Thread-1", "execution_time": 0.08503508567810059, "adapter_response": {}, "message": "Database Error in model src_ads (models/src/src_ads.sql)\n  invalid input syntax for type integer: \"Exclusivit\u00e9\"\n  compiled Code at target/run/scraping_dbt/models/src/src_ads.sql", "failures": null, "unique_id": "model.scraping_dbt.src_ads", "compiled": true, "compiled_code": "WITH raw_ads AS (\n    SELECT * FROM \"scraping_db\".\"public\".\"ads\"\n    )\n\nSELECT \n    RIGHT(url, 6) AS ad_id,\n    url AS ad_url,\n    lieu AS ad_location,\n    /* CASE WHEN lieu = '-' THEN NULL ELSE REGEXP_SUBSTR(lieu, '^([^(]+)') END AS ad_city, /* Old Method */ */\n    /* CASE WHEN lieu = '-' THEN NULL ELSE REGEXP_SUBSTR(lieu, '\\(([^)]+)\\)') END AS ad_zipcode, /* Old Method */ */\n    /* CASE WHEN lieu = '-' THEN NULL ELSE REGEXP_EXTRACT(lieu, r'^([^(]+)') END AS ad_city, /* For GCP */ */\n    /* CASE WHEN lieu = '-' THEN NULL ELSE REGEXP_EXTRACT(lieu, r'\\(([^)]+)\\)') END AS ad_zipcode, /* For GCP */ */\n    INITCAP(SPLIT_PART(url, '-', -3)) AS ad_city,\n    SPLIT_PART(url, '-', -2) AS ad_zipcode,\n    surface AS ad_surface,\n    COALESCE(nb_chambres, 0) AS ad_nb_bedrooms,\n    /* IFNULL(nb_chambres, 0) AS ad_nb_bedrooms, /* For GCP */ */\n    nb_pieces AS ad_nb_rooms,\n    CAST(REPLACE(price, ' ', '') AS INTEGER) AS ad_price,\n    CAST(REPLACE(prix_m2, ' ', '') AS INTEGER) AS ad_price_sqm,\n    /* CAST(REPLACE(price, ' ', '') AS INT64) AS ad_price, /* For GCP */ */\n    /* CAST(REPLACE(prix_m2, ' ', '') AS INT64) AS ad_price_sqm, /* For GCP */ */\n    tags AS ad_tags,\n    tag_1 AS ad_tag_1,\n    tag_2 AS ad_tag_2,\n    tag_3 AS ad_tag_3,\n    images_url AS ad_images_url,\n    date_scraped AS ad_date_scraped,\n    TO_DATE(date_publication, 'DD/mm/YYYY') AS ad_published_on,\n    /* PARSE_DATE(\"%d/%m/%Y\", date_publication) AS ad_published_on, /* For GCP */ */\n    CURRENT_TIMESTAMP AS created_at,\n    CURRENT_TIMESTAMP AS updated_at \n    /* CURRENT_TIMESTAMP() AS created_at,  /* For GCP */ */\n    /* CURRENT_TIMESTAMP() AS updated_at  /* For GCP */ */\nFROM\n    raw_ads", "relation_name": "\"scraping_db\".\"public\".\"src_ads\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-05T15:49:12.340259Z", "completed_at": "2024-07-05T15:49:12.344106Z"}, {"name": "execute", "started_at": "2024-07-05T15:49:12.344542Z", "completed_at": "2024-07-05T15:49:12.418524Z"}], "thread_id": "Thread-1", "execution_time": 0.07990002632141113, "adapter_response": {"_message": "SELECT 246", "code": "SELECT", "rows_affected": 246}, "message": "SELECT 246", "failures": null, "unique_id": "model.scraping_dbt.src_prix_m2", "compiled": true, "compiled_code": "WITH raw_prix_m2 AS (\n    SELECT * FROM \"scraping_db\".\"public\".\"prix_m2_commune\"\n    )\n\nSELECT \n    CASE \n        WHEN LENGTH(CAST(zipcode AS TEXT)) = 4 THEN CONCAT('0', CAST(zipcode AS TEXT))\n        ELSE CAST(zipcode AS TEXT)\n        /* WHEN LENGTH(CAST(zipcode AS STRING)) = 4 THEN CONCAT(\"0\", CAST(zipcode AS STRING))\n        ELSE CAST(zipcode AS STRING) /* For GCP */ */\n        END\n        AS zipcode,\n    city_name,\n    house_type,\n    CAST(prix_m2 AS INTEGER) AS prix_m2\nFROM\n    raw_prix_m2", "relation_name": "\"scraping_db\".\"public\".\"src_prix_m2\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.scraping_dbt.dim_ads_images_url", "compiled": false, "compiled_code": null, "relation_name": "\"scraping_db\".\"public\".\"dim_ads_images_url\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.scraping_dbt.dim_ads_tags", "compiled": false, "compiled_code": null, "relation_name": "\"scraping_db\".\"public\".\"dim_ads_tags\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.scraping_dbt.src_ads_cleaned", "compiled": false, "compiled_code": null, "relation_name": "\"scraping_db\".\"public\".\"src_ads_cleaned\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.scraping_dbt.src_ads_cleaned_backup_incremental", "compiled": false, "compiled_code": null, "relation_name": "\"scraping_db\".\"public\".\"src_ads_cleaned_backup_incremental\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.scraping_dbt.dim_ads_details", "compiled": false, "compiled_code": null, "relation_name": "\"scraping_db\".\"public\".\"dim_ads_details\""}], "elapsed_time": 0.327223539352417, "args": {"empty": false, "show_resource_report": false, "log_format": "default", "printer_width": 80, "select": [], "which": "run", "vars": {}, "log_level_file": "debug", "log_format_file": "debug", "defer": false, "cache_selected_only": false, "partial_parse_file_diff": true, "favor_state": false, "introspect": true, "strict_mode": false, "invocation_command": "dbt run --profiles-dir /opt/airflow/dbt_profiles", "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "project_dir": "/opt/airflow/scraping_dbt", "populate_cache": true, "quiet": false, "indirect_selection": "eager", "exclude": [], "print": true, "log_file_max_bytes": 10485760, "require_resource_names_without_spaces": false, "use_colors": true, "version_check": true, "partial_parse": true, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "log_path": "/opt/airflow/scraping_dbt/logs", "macro_debugging": false, "use_colors_file": true, "source_freshness_run_project_hooks": false, "enable_legacy_logger": false, "profiles_dir": "/opt/airflow/dbt_profiles", "log_level": "info"}}